@model List<WebApplication1.Models.CarritoItemModel>
@using System.Globalization

@{
    ViewData["Title"] = "Carrito de Compras";

    // Sumar subtotales e impuestos a nivel de vista, si lo deseas
    decimal subtotalGeneral = 0;
    decimal impuestosGeneral = 0;
    decimal totalGeneral = 0;
}

<div class="jumbotron text-center">
    <h1 class="display-4">Carrito de Compras</h1>
    <p class="lead">Revisa los productos y servicios que has agregado.</p>
</div>

<!-- 🔹 ID del paciente oculto (si necesitas usarlo en AJAX) -->
<input type="hidden" id="user-id" value="@ViewBag.IdPaciente" />

<div class="cart-container mt-5">
    <div class="card shadow-lg" style="border-radius: 10px;">
        <div class="card-header text-white text-center" style="background-color: #003366; font-size: 1.5rem;">
            Tus Ítems en el Carrito
        </div>

        <div class="card-body" style="color: #003366;">
            @if (Model != null && Model.Any())
            {
                <table class="table table-striped">
                    <thead style="background-color: #003366; color: #FFFFFF;">
                        <tr>
                            <th>Imagen</th>
                            <th>Nombre</th>
                            <th>Cantidad</th>
                            <th>Precio Unitario</th>
                            <th>Impuestos</th>
                            <th>Total</th>
                            <th>Acción</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            // 1) Determinar si es producto o servicio
                            string nombreItem, imagenUrl;
                            if (item.Tipo == "producto" && item.Producto != null)
                            {
                                nombreItem = item.Producto.Nombre ?? "Producto sin nombre";
                                imagenUrl = string.IsNullOrEmpty(item.Producto.UrlImagen)
                                    ? Url.Content("~/images/default-product.jpg")
                                    : Url.Content(item.Producto.UrlImagen);
                            }
                            else if (item.Tipo == "servicio" && item.Servicio != null)
                            {
                                nombreItem = item.Servicio.Nombre ?? "Servicio sin nombre";
                                imagenUrl = string.IsNullOrEmpty(item.Servicio.UrlImagen)
                                    ? Url.Content("~/images/default-product.jpg")
                                    : Url.Content(item.Servicio.UrlImagen);
                            }
                            else
                            {
                                // Fallback si no hay datos
                                nombreItem = "Ítem desconocido";
                                imagenUrl = Url.Content("~/images/default-product.jpg");
                            }

                            // 2) Cálculo en la vista (opcional)
                            //    Si el Controller ya guarda item.Total, úsalo directamente.
                            //    O lo recomputas: (item.PrecioUnitario * item.Cantidad) + item.Impuestos
                            decimal subtotalLinea = item.PrecioUnitario * item.Cantidad;
                            decimal impuestosLinea = item.Impuestos;
                            decimal totalLinea = subtotalLinea + impuestosLinea;

                            // 3) Acumular para mostrar total global
                            subtotalGeneral += subtotalLinea;
                            impuestosGeneral += impuestosLinea;
                            totalGeneral += totalLinea;

                            <tr>
                                <td>
                                    <img src="@imagenUrl"
                                         alt="@nombreItem"
                                         style="width: 80px; height: auto; border-radius: 8px;" />
                                </td>
                                <td>@nombreItem</td>
                                <td>@item.Cantidad</td>
                                <td>₡@item.PrecioUnitario.ToString("N2", CultureInfo.InvariantCulture)</td>
                                <td>₡@impuestosLinea.ToString("N2", CultureInfo.InvariantCulture)</td>
                                <td>₡@totalLinea.ToString("N2", CultureInfo.InvariantCulture)</td>
                                <td>
                                    <!-- Botón para eliminar un ítem del carrito -->
                                    <button class="btn btn-danger btn-sm remove-from-cart"
                                            data-id="@item.IdCarritoItem">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div class="mt-4 d-flex justify-content-between align-items-center">
                    <!-- Botón para vaciar carrito -->
                    <button id="clear-cart" class="btn btn-danger fw-bold">
                        <i class="bi bi-trash3-fill"></i> Vaciar Carrito
                    </button>

                    <!-- Totales globales -->
                    <div class="text-end fw-bold">
                        <p class="m-0">Subtotal: ₡@subtotalGeneral.ToString("N2", CultureInfo.InvariantCulture)</p>
                        <p class="m-0">Impuestos: ₡@impuestosGeneral.ToString("N2", CultureInfo.InvariantCulture)</p>
                        <h5 class="mt-1">Total: ₡@totalGeneral.ToString("N2", CultureInfo.InvariantCulture)</h5>
                    </div>

                    <!-- Botón para checkout -->
                    <form asp-action="Checkout"
                          asp-controller="Carrito"
                          method="get"
                          class="m-0">
                        <button type="submit" class="btn btn-success fw-bold">
                            <i class="bi bi-credit-card-fill"></i> Proceder al Pago
                        </button>
                    </form>
                </div>
            }
            else
            {
                <div class="text-center fw-bold text-danger mt-4">
                    <h5>No hay productos o servicios en el carrito.</h5>
                </div>
            }
        </div>
    </div>
</div>

<!-- ICONOS DE BOOTSTRAP -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" />

<!-- Estilos y script -->
<style>
    .cart-container {
        margin-top: 20px;
        background-color: #F8F9FA;
        padding: 20px;
        border-radius: 10px;
    }
    .btn-danger {
        background-color: #dc3545 !important;
        border-color: #dc3545 !important;
    }
    .btn-danger:hover {
        background-color: #c82333 !important;
        border-color: #bd2130 !important;
    }
    .btn-success {
        background-color: #28a745 !important;
        border-color: #28a745 !important;
    }
    .btn-success:hover {
        background-color: #218838 !important;
        border-color: #1e7e34 !important;
    }
    .total-text {
        color: #003366 !important;
        font-size: 1.6rem;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const clearCartButton = document.getElementById("clear-cart");
        const userIdElement = document.getElementById("user-id");
        let idPaciente = userIdElement ? userIdElement.value.trim() : "";

        if (!idPaciente) {
            console.warn("⚠️ No se detectó el ID del paciente para las operaciones del carrito.");
            return;
        }

        // Vaciar el carrito
        if (clearCartButton) {
            clearCartButton.addEventListener("click", async function () {
                if (!confirm("¿Estás seguro de vaciar el carrito?")) return;
                try {
                    let response = await fetch("/Carrito/VaciarCarrito", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ idPaciente: idPaciente })
                    });
                    if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
                    location.reload();
                } catch (error) {
                    console.error("❌ Error al vaciar el carrito:", error);
                    alert("❌ Hubo un problema al vaciar el carrito.");
                }
            });
        }

        // Eliminar (o restar) un ítem del carrito
        document.body.addEventListener("click", async function (event) {
            const removeBtn = event.target.closest(".remove-from-cart");
            if (!removeBtn) return;
            const idCarritoItem = removeBtn.dataset.id;
            if (!confirm("¿Seguro que deseas eliminar una unidad de este ítem?")) return;
            try {
                let response = await fetch("/Carrito/EliminarItem", {
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: new URLSearchParams({ idCarritoItem: idCarritoItem })
                });
                if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
                location.reload();
            } catch (error) {
                console.error("❌ Error al eliminar el ítem:", error);
                alert("❌ Ocurrió un error al eliminar el ítem.");
            }
        });
    });

</script>
